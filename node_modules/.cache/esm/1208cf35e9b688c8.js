_e9b‍.x([["default",()=>Game]]);/*
Add your code for Game here
 */
               class Game {

    constructor(size) {
        this.size = size;
        var length = size * size;
        this.length = length;
        var gameArray = new Array();
        for (var i = 0; i < this.length; i++) {
            gameArray.push(0);
        }
        gameArray[this.selectRandomTile(gameArray)] = this.generateTileValue();
        gameArray[this.selectRandomTile(gameArray)] = this.generateTileValue();
        var gameState = {
            board: gameArray,
            score: 0,
            won: false,
            over: false
        };
        this.gameState = gameState;
        var moveArr = new Array();
        this.moveArr = moveArr;
    }

    generateTileValue() {
        // returns 2 or 4
        var randomNum = Math.floor((Math.random() * 10) + 1);
        var tileValue;
        if (randomNum > 9) {
            tileValue = 4;
        } else {
            tileValue = 2;
        }
        return tileValue;
    }

    selectRandomTile(array) {
        // returns free index of game array
        var indexOfZed = new Array();
        for (var i = 0; i < array.length; i++) {
            if (array[i] == 0) {
                indexOfZed.push(i);
            }
        }
        var randomIndex = Math.floor(Math.random() * indexOfZed.length);
        return indexOfZed[randomIndex];
    }

    setupNewGame() {
        // reset to new game state
        var gameArray = new Array();
        for (var i = 0; i < this.length; i++) {
            gameArray.push(0);
        }
        gameArray[this.selectRandomTile(gameArray)] = this.generateTileValue();
        gameArray[this.selectRandomTile(gameArray)] = this.generateTileValue();
        var gameState = {
            board: gameArray,
            score: 0,
            won: false,
            over: false
        };
        this.gameState = gameState;
    }

    loadGame(gameState) {
        this.gameState.board = gameState.board;
        this.gameState.score = gameState.score;
        this.gameState.won = gameState.won;
        this.gameState.over = gameState.over;
    }

    toString() {
        var row = 0;
        var outputS = "";
        for (var i = 0; i < this.size; i++) {
            for (var j = 0; j < this.size; j++) {
                outputS += "[" + this.gameState.board[(this.size * i) + j] + "]";
            }
            outputS += "\n";
            //row += 1;
        }
        return outputS;
    }

    onMove(callback) {
        this.moveArr.push(callback);
    }

    onWin(callback) {

    }

    onLose(callback) {

    }

    getGameState() {
        return this.gameState;
    }

    combine(array) {
        for (var i = array.length - 1; i >= 0; i--) {
            //move all zeroes to end
            if (array[i] == 0) {
                for (var j = i; j < array.length - 1; j++) {
                    array[j] = array[j + 1];
                }
                array[array.length - 1] = 0;
            }
        }

        // for (var i = 0; i < array.length - 1; i++) {
        //     //combine same numbers
        //     if (array[i] != 0) {
        //         if (array[i] == array[i + 1]) {
        //             array[i] = 2 * array[i];
        //             this.gameState.score += array[i];
        //             for (var j = i; j < array.length - 1 - i; j++) {
        //                 array[j] = array[j + 1];
        //             }
        //             array[array.length - 1] = 0;
        //         }
        //     }
        // }
    }

    move(direction) {
        var backToOne = new Array();
        var row = new Array();
        if (direction == 'left' || direction == 'right') {
            //make row major 2d array
            var rowTwoDee = new Array();
            for (var k = 0; k < this.size; k++) {
                for (var l = 0; l < this.size; l++) {

                    row[row.length] = this.gameState.board[(k * this.size) + l];
                }
                console.log(row);
                rowTwoDee.push(row);
                row = new Array();
            }

            console.log(rowTwoDee);



            if (direction == 'left') {
                for (var i = 0; i < rowTwoDee.length; i++) {
                    this.combine(rowTwoDee[i]);
                }
            } else {
                for (var i = 0; i < rowTwoDee.length; i++) {
                    this.combine(rowTwoDee[i].reverse)
                    rowTwoDee[i].reverse;
                }
            }
            //convert back to 1d array
            backToOne = new Array();
            for (var i = 0; i < rowTwoDee.length; i++) {
                var roww = rowTwoDee[i];
                for (var j = 0; j < roww.length; j++) {
                    backToOne[(this.size * i) + j] = roww[j];
                }
            }

            //add new tile
            var tileVal = this.generateTileValue();
            var tileIndex = this.selectRandomTile(backToOne);
            backToOne[tileIndex] = tileVal;

            this.gameState.board = backToOne;
            for (var i = 0; i < this.moveArr.length; i++) {
                this.moveArr[i]();
            }
            return;


        } // else if (direction == 'up' || direction == 'down') {
        //     //make column major 2d array
        //     var columnTwoDee = new Array();
        //     for (var i = 0; i < this.size; i++) {
        //         for (var j = 0; j < this.size; j++) {
        //             var column = new Array();
        //             column.push(this.gameState.board[i + (this.size * j)])
        //         }
        //         columnTwoDee.push(column);
        //     }
        //     if (direction == 'up') {
        //         for (var i = 0; i < columnTwoDee.length; i++) {
        //             this.combine(columnTwoDee[i]);
        //         }
        //     } else {
        //         for (var i = 0; i < columnTwoDee.length; i++) {
        //             this.combine(columnTwoDee[i].reverse);
        //             columnTwoDee[i].reverse;
        //         }
        //     }
        //     // convert back to 1d array
        //     backToOne = new Array();
        //     for (var i = 0; i < columnTwoDee.length; i++) {
        //         var coll = columnTwoDee[i];
        //         for (var j = 0; j < coll.length; j++) {
        //             backToOne[(this.size * j) + i] = coll[j];
        //         }
        //     }
        // }

        //add new tile
        // var tileVal = this.generateTileValue();
        // var tileIndex = this.selectRandomTile(backToOne);
        // backToOne[tileIndex] = tileVal;



        this.gameState.board = backToOne;
        for (var i = 0; i < this.moveArr.length; i++) {
            this.moveArr[i]();
        }
        return;
    }
}